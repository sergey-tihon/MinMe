@inherits global::Blazor.Fluxor.Components.FluxorComponent
@using global::Blazor.Fluxor
@using global::MinMe.Blazor.Store.Document

@inject IDispatcher Dispatcher
@inject IState<DocumentState> DocumentState
@inject DocumentService DocumentService
@inject NotificationService NotificationService

<div class="container-fluid">
    <div class="row">
        <div class="row">
            <h3>Choose PowerPoint file:</h3>
        </div>
        <div class="col-md-auto">
            <button class="btn btn-info"
                    @onclick="OpenFile">
                Open File
            </button>
        </div>
        <div class="col">
            <div class="form-group">
                <input id="name" type="text" class="form-control"
                       placeholder="@Placeholder"
                       disabled="@ElectronNET.API.HybridSupport.IsElectronActive"
                       @bind-value="FileName"
                       @bind-value:event="oninput" />
            </div>
        </div>
    </div>
    @if (DocumentState.Value.FileContentInfo is { } fileInfo)
    {
        <div class="row">
            <h3>Quick action</h3>
        </div>
        <div class="row">
            <div class="col-md-auto">
                <button class="btn btn-info"
                        @onclick="Publish">
                    Publish Slides
                </button>
            </div>
            <div class="col">
                Split presentation into individual slides
            </div>
        </div>
    }
</div>


@code {
    private string FileName { get; set; } = string.Empty;

    private readonly string Placeholder =
        ElectronNET.API.HybridSupport.IsElectronActive
            ? "Current file" : "Drop file here";

    protected override void OnInitialized()
    {
        base.OnInitialized();
        FileName = DocumentState.Value.FileContentInfo?.FileName ?? string.Empty;
    }

    public async Task OpenFile() {
        if (ElectronNET.API.HybridSupport.IsElectronActive)
        {
            FileName = await DocumentService.OpenFile();
        }

        if (!System.IO.File.Exists(FileName))
        {
            NotificationService.ShowError("File not found", FileName);
        }
        else
        {
            Dispatcher.Dispatch(new OpenFileAction { FileName = FileName });
        }
    }

    public void Publish()
    {
        var fileName = DocumentState.Value.FileContentInfo!.FileName;
        var count = DocumentService.PublishSlides(fileName);
        NotificationService.ShowSuccess("Success", $"Extracted {count} slide");
    }
}
